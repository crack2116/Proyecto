import { toast } from "@/hooks/use-toast";

/**
 * Utilidad para mostrar mensajes de toast consistentes en toda la aplicaci√≥n
 */

export const toastMessages = {
  // ========== CLIENTES ==========
  client: {
    created: () => toast({
      title: "‚úÖ Cliente Creado",
      description: "El cliente ha sido registrado exitosamente.",
    }),
    updated: () => toast({
      title: "‚úÖ Cliente Actualizado",
      description: "Los datos del cliente han sido actualizados.",
    }),
    deleted: () => toast({
      title: "‚úÖ Cliente Eliminado",
      description: "El cliente ha sido eliminado exitosamente.",
    }),
    error: (message = "Ocurri√≥ un error al procesar el cliente.") => toast({
      variant: "destructive",
      title: "‚ùå Error",
      description: message,
    }),
  },

  // ========== CONDUCTORES ==========
  driver: {
    created: () => toast({
      title: "‚úÖ Conductor Registrado",
      description: "El conductor ha sido registrado exitosamente.",
    }),
    updated: () => toast({
      title: "‚úÖ Conductor Actualizado",
      description: "Los datos del conductor han sido actualizados.",
    }),
    deleted: () => toast({
      title: "‚úÖ Conductor Eliminado",
      description: "El conductor ha sido eliminado exitosamente.",
    }),
    error: (message = "Ocurri√≥ un error al procesar el conductor.") => toast({
      variant: "destructive",
      title: "‚ùå Error",
      description: message,
    }),
  },

  // ========== VEH√çCULOS ==========
  vehicle: {
    created: () => toast({
      title: "‚úÖ Veh√≠culo Registrado",
      description: "El veh√≠culo ha sido registrado exitosamente.",
    }),
    updated: () => toast({
      title: "‚úÖ Veh√≠culo Actualizado",
      description: "Los datos del veh√≠culo han sido actualizados.",
    }),
    deleted: () => toast({
      title: "‚úÖ Veh√≠culo Eliminado",
      description: "El veh√≠culo ha sido eliminado exitosamente.",
    }),
    error: (message = "Ocurri√≥ un error al procesar el veh√≠culo.") => toast({
      variant: "destructive",
      title: "‚ùå Error",
      description: message,
    }),
  },

  // ========== SOLICITUDES DE SERVICIO ==========
  serviceRequest: {
    created: () => toast({
      title: "‚úÖ Solicitud Creada",
      description: "La solicitud de servicio ha sido creada exitosamente.",
    }),
    updated: () => toast({
      title: "‚úÖ Solicitud Actualizada",
      description: "La solicitud ha sido actualizada exitosamente.",
    }),
    deleted: () => toast({
      title: "‚úÖ Solicitud Eliminada",
      description: "La solicitud ha sido eliminada exitosamente.",
    }),
    assigned: (driverName: string) => toast({
      title: "‚úÖ Conductor Asignado",
      description: `Conductor ${driverName} asignado a la solicitud.`,
    }),
    cancelled: () => toast({
      title: "‚úÖ Solicitud Cancelada",
      description: "La solicitud ha sido cancelada exitosamente.",
      variant: "destructive",
    }),
    completed: () => toast({
      title: "‚úÖ Servicio Completado",
      description: "El servicio ha sido marcado como completado.",
    }),
    error: (message = "Ocurri√≥ un error al procesar la solicitud.") => toast({
      variant: "destructive",
      title: "‚ùå Error",
      description: message,
    }),
  },

  // ========== RUTAS Y TRACKING ==========
  tracking: {
    routesAssigned: (count: number) => toast({
      title: "‚úÖ Rutas Asignadas",
      description: `Se han asignado rutas a ${count} veh√≠culos.`,
    }),
    vehiclesInTransit: (count: number) => toast({
      title: "‚úÖ Veh√≠culos en Tr√°nsito",
      description: `${count} veh√≠culos han sido marcados como 'En Tr√°nsito'.`,
    }),
    simulationStarted: () => toast({
      title: "‚ñ∂Ô∏è Simulaci√≥n Iniciada",
      description: "Los veh√≠culos est√°n movi√©ndose por sus rutas.",
    }),
    simulationStopped: () => toast({
      title: "‚è∏Ô∏è Simulaci√≥n Detenida",
      description: "La simulaci√≥n de movimiento ha sido detenida.",
    }),
    error: (message = "Ocurri√≥ un error en el tracking.") => toast({
      variant: "destructive",
      title: "‚ùå Error",
      description: message,
    }),
  },

  // ========== BASE DE DATOS ==========
  database: {
    populated: (counts: { clients: number; drivers: number; vehicles: number; services: number }) => toast({
      title: "‚úÖ Base de Datos Poblada",
      description: `${counts.clients} clientes, ${counts.drivers} conductores, ${counts.vehicles} veh√≠culos y ${counts.services} servicios agregados.`,
    }),
    cleared: () => toast({
      title: "‚úÖ Base de Datos Limpiada",
      description: "Todos los datos han sido eliminados.",
      variant: "destructive",
    }),
    error: (message = "Ocurri√≥ un error en la operaci√≥n.") => toast({
      variant: "destructive",
      title: "‚ùå Error",
      description: message,
    }),
  },

  // ========== AUTENTICACI√ìN ==========
  auth: {
    signedIn: () => toast({
      title: "‚úÖ Sesi√≥n Iniciada",
      description: "Bienvenido al sistema.",
    }),
    signedOut: () => toast({
      title: "üëã Sesi√≥n Cerrada",
      description: "Tu sesi√≥n ha sido cerrada exitosamente.",
    }),
    error: (message = "Error de autenticaci√≥n.") => toast({
      variant: "destructive",
      title: "‚ùå Error",
      description: message,
    }),
  },

  // ========== GEN√âRICOS ==========
  success: (title: string, description?: string) => toast({
    title: `‚úÖ ${title}`,
    description,
  }),

  error: (title: string, description?: string) => toast({
    variant: "destructive",
    title: `‚ùå ${title}`,
    description,
  }),

  info: (title: string, description?: string) => toast({
    title: `‚ÑπÔ∏è ${title}`,
    description,
  }),

  warning: (title: string, description?: string) => toast({
    variant: "destructive",
    title: `‚ö†Ô∏è ${title}`,
    description,
  }),
};
