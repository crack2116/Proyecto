/**
 * @fileoverview Firestore Security Rules for Transport Service App
 *
 * Core Philosophy:
 * This ruleset enforces a role-based and ownership-based access control model.
 * Users can only access their own profiles. Admins have broad access to manage
 * clients, drivers, vehicles, service requests, and routes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user.
 * - /roles_admin/{userId}: Indicates admin role, granting elevated privileges.
 * - /clients/{clientId}: Stores client information, accessible by admins.
 * - /drivers/{driverId}: Stores driver information, accessible by admins.
 * - /vehicles/{vehicleId}: Stores vehicle information, accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Stores service requests, accessible by admins.
 * - /routes/{routeId}: Stores route information, accessible by admins.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - The existence of a document in `/roles_admin/{userId}` grants admin privileges.
 * - Default security posture is strict; access must be explicitly allowed.
 *
 * Denormalization for Authorization:
 * - No denormalization is strictly required with the data model provided, but an admin role
 *   is checked by looking up the existence of a document in `/roles_admin/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Enforces that a document exists and that the current user is the owner.  Useful for update/delete.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can access their own profile. Admins can access any profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) User cannot list all users.
     * @principle Enforces user-ownership and admin override.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Only a server function can create admin roles.
     * @allow (get) Any authenticated user can check if they are an admin (for UI purposes).
     * @deny (list, update, delete) Admin role management is restricted.
     * @principle Restricts admin role management.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow create, update, delete: if false;
      allow list: if false;
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (create, get, list, update, delete) Admins can manage client information.
     * @deny Non-admins cannot manage client information.
     * @principle Admin-only access for client data.
     */
    match /clients/{clientId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (create, get, list, update, delete) Admins can manage driver information.
     * @deny Non-admins cannot manage driver information.
     * @principle Admin-only access for driver data.
     */
    match /drivers/{driverId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (create, get, list, update, delete) Admins can manage vehicle information.
     * @deny Non-admins cannot manage vehicle information.
     * @principle Admin-only access for vehicle data.
     */
    match /vehicles/{vehicleId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create, get, list, update, delete) Admins can manage service requests.
     * @deny Non-admins cannot manage service requests (except for listing, which is currently open).
     * @principle Admin-only access for service request data.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (create, get, list, update, delete) Admins can manage route information.
     * @deny Non-admins cannot manage route information.
     * @principle Admin-only access for route data.
     */
    match /routes/{routeId} {
      allow get, list, create, update, delete: if isAdmin();
    }
  }
}