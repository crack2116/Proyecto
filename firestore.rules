/**
 * @fileoverview Firestore Security Rules for the Transport Service application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles (admin) and ownership.
 * Access is strictly controlled, with an emphasis on preventing unauthorized data modification or listing.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only accessible by the user themselves.
 * - /roles_admin/{userId}: Indicates admin roles. The existence of a document grants admin privileges.
 * - /clients/{clientId}: Stores client information; accessible by admins.
 * - /drivers/{driverId}: Stores driver information; accessible by admins.
 * - /vehicles/{vehicleId}: Stores vehicle information; accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Stores transport service requests; accessible by admins.
 * - /routes/{routeId}: Stores route information; accessible by admins.
 *
 * Key Security Decisions:
 * - Admin Role: Determined by the presence of a document in `/roles_admin/{userId}`.
 * - Ownership: Enforced on `/users/{userId}`.
 * - No User Listing: Listing of users is explicitly denied.
 * - Admin-Only Access: Collections like `/drivers`, `/vehicles`, and `/routes` are restricted to admins.
 * - Public Read Denied: No collections should have public read access (`allow get, list: if true;`).
 *
 * Denormalization for Authorization:
 *  - Admin status is determined by the existence of a document in `/roles_admin/{userId}`. The `isAdmin()` function checks for this.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * Used for update and delete operations to prevent acting on non-existent documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    match /users/{userId} {
      /**
       * @description Controls access to user profile data.
       * @path /users/{userId}
       * @allow (create) User with ID 'user123' can create their own profile.
       *    request.auth.uid: 'user123', request.resource.data.id: 'user123'
       * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
       *    request.auth.uid: 'user456', request.resource.data.id: 'user123'
       * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
       *    request.auth.uid: 'user123'
       * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile of 'user123'.
       *    request.auth.uid: 'user456'
       * @principle Enforces document ownership for writes.
       */
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    match /roles_admin/{userId} {
       /**
        * @description Controls access to admin role assignments.
        * @path /roles_admin/{userId}
        * @allow (get) Any authenticated user can check for admin status.
        * @deny (create, update, delete) Only accessible through backend functions or admin SDK.
        * @principle Restricts modification of admin roles to authorized personnel.
        */
      allow get: if isSignedIn();
      allow list: if false;
      allow create, update, delete: if false;
    }

    match /clients/{clientId} {
      /**
       * @description Controls access to client data.
       * @path /clients/{clientId}
       * @allow (read, write) Admins can read and write client data.
       * @deny (read, write) Non-admins cannot read or write client data.
       * @principle Restricts client data management to administrators.
       */
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    match /drivers/{driverId} {
      /**
       * @description Controls access to driver data.
       * @path /drivers/{driverId}
       * @allow (read, write) Admins can read and write driver data.
       * @deny (read, write) Non-admins cannot read or write driver data.
       * @principle Restricts driver data management to administrators.
       */
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    match /vehicles/{vehicleId} {
      /**
       * @description Controls access to vehicle data.
       * @path /vehicles/{vehicleId}
       * @allow (read, write) Admins can read and write vehicle data.
       * @deny (read, write) Non-admins cannot read or write vehicle data.
       * @principle Restricts vehicle data management to administrators.
       */
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    match /serviceRequests/{serviceRequestId} {
      /**
       * @description Controls access to service request data.
       * @path /serviceRequests/{serviceRequestId}
       * @allow (read, write) Admins can read and write service request data.
       * @deny (read, write) Non-admins cannot read or write service request data.
       * // TODO: Implement client-specific access control.
       * @principle Restricts service request data management to administrators.
       */
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    match /routes/{routeId} {
      /**
       * @description Controls access to route data.
       * @path /routes/{routeId}
       * @allow (read, write) Admins can read and write route data.
       * @deny (read, write) Non-admins cannot read or write route data.
       * @principle Restricts route data management to administrators.
       */
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}