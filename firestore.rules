/**
 * @file Firebase Security Rules for Transport Service App
 *
 * @description This ruleset enforces a role-based access control model with user-specific ownership where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user and admins.
 * - /roles_admin/{userId}: Admin role markers; document existence grants admin privileges.
 * - /clients/{clientId}: Client information, accessible by admins.
 * - /drivers/{driverId}: Driver information, accessible by admins.
 * - /vehicles/{vehicleId}: Vehicle information, accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Service requests, accessible by admins.
 * - /routes/{routeId}: Route information, accessible by admins.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Admin privileges are determined by the presence of a document in the /roles_admin/{userId} collection.
 * - Data validation is relaxed in prototyping mode, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `ServiceRequest` entity should contain the `clientId` to quickly verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the provided userId.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId The user ID to compare against the resource data.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - Auth: { uid: 'user123' }
     * @deny (create) User with ID 'user123' tries to create profile for 'user456'.
     *   - Auth: { uid: 'user123' }
     * @allow (get) User with ID 'user123' reads their own profile.
     *   - Auth: { uid: 'user123' }
     * @deny (get) User with ID 'user123' tries to read profile for 'user456'.
     *   - Auth: { uid: 'user123' }
     * @principle Enforces document ownership for reads and writes, with admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) ;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) An admin can grant another user admin rights.
     *   - Auth: { uid: 'admin123' }, Request: create /roles_admin/user456
     * @deny (create) A non-admin user tries to grant themselves admin rights.
     *   - Auth: { uid: 'user123' }, Request: create /roles_admin/user123
     * @principle Restricts admin role creation to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Admin role listing is not permitted.
      allow create: if isAdmin();
      allow update: if false; // Admin roles cannot be updated.
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (create) An admin can create a new client.
     *   - Auth: { uid: 'admin123' }
     * @deny (update) A non-admin user tries to update a client.
     *   - Auth: { uid: 'user123' }
     * @principle Restricts client data management to admins.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (create) An admin can create a new driver.
     *   - Auth: { uid: 'admin123' }
     * @deny (update) A non-admin user tries to update a driver.
     *   - Auth: { uid: 'user123' }
     * @principle Restricts driver data management to admins.
     */
    match /drivers/{driverId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (create) An admin can create a new vehicle.
     *   - Auth: { uid: 'admin123' }
     * @deny (update) A non-admin user tries to update a vehicle.
     *   - Auth: { uid: 'user123' }
     * @principle Restricts vehicle data management to admins.
     */
    match /vehicles/{vehicleId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for transport service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) An authenticated user can create a service request.
     *   - Auth: { uid: 'user123' }, Request: create /serviceRequests/req123
     * @deny (update) A non-admin user tries to update a service request that they don't own.
     *   - Auth: { uid: 'user456' }, Request: update /serviceRequests/req123, Resource: { clientId: 'user123' }
     * @principle Allows admins to manage all requests and users to manage their own requests.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin(); //Fixed: Admin can read all the Service Requests, to fix error reported in prompt.
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (create) An admin can create a new route.
     *   - Auth: { uid: 'admin123' }
     * @deny (update) A non-admin user tries to update a route.
     *   - Auth: { uid: 'user123' }
     * @principle Restricts route data management to admins.
     */
    match /routes/{routeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}