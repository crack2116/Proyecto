/**
 * @fileoverview Firestore Security Rules for Transport Service App
 *
 * Core Philosophy:
 * This ruleset enforces a role-based and ownership-based access control model.
 * Users can only access their own profiles. Admins have broad access to manage
 * clients, drivers, vehicles, service requests, and routes. Clients can only
 * access service requests they created.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges to the user.
 * - /clients/{clientId}: Stores client information.
 * - /drivers/{driverId}: Stores driver information.
 * - /vehicles/{vehicleId}: Stores vehicle information.
 * - /serviceRequests/{serviceRequestId}: Stores service requests.
 * - /routes/{routeId}: Stores route information.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Admin privileges are determined by the existence of a document in the `/roles_admin/{userId}` collection.
 * - Clients can only create and manage their own service requests.
 * - Data validation is limited to authorization-critical fields.
 * - The rules explicitly deny listing of the `roles_admin` collection to prevent unauthorized privilege escalation.
 *
 * Denormalization for Authorization:
 * To avoid costly `get()` calls, the `ServiceRequest` includes the `clientId` to easily
 * check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare with the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an admin.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     *              Combines the ownership check with a resource existence check.
     * @param {string} userId The user ID to compare with the resource's owner ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (read, write) User with matching {userId}.
     * @deny (read, write) User with non-matching {userId}.
     * @principle Enforces user-ownership model for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Only allow server to create admin roles.
     * @deny (read, write, delete) Prevent any client-side access.
     * @principle  Admin role management should be server-side only.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Never allow listing of admin roles for security.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (read, write) Admins can read and write all client data.
     * @principle Admins manage client information.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (read, write) Admins can read and write all driver data.
     * @principle Admins manage driver information.
     */
    match /drivers/{driverId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (read, write) Admins can read and write all vehicle data.
     * @principle Admins manage vehicle information.
     */
    match /vehicles/{vehicleId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for transport service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (read) Admins can read all service requests. Clients can read their own requests.
     * @allow (create) Clients can create service requests.
     * @allow (update, delete) Admins can update and delete service requests.
     * @principle  Admins manage all service requests. Clients can only manage their own.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isSignedIn() && (isAdmin() || resource.data.clientId == request.auth.uid);
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (read, write) Admins can read and write all route data.
     * @principle Admins manage route information.
     */
    match /routes/{routeId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}