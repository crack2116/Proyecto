/**
 * @fileoverview Firestore Security Rules for Transport Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with an additional layer of user-ownership
 * for certain collections. Admins have broad access, while regular users are restricted to their own data
 * and data they create.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user and admins can access.
 * - /roles_admin/{userId}: Indicates admin role. Document existence grants admin privileges.
 * - /clients/{clientId}: Stores client information. Accessible by admins.
 * - /drivers/{driverId}: Stores driver information. Accessible by admins.
 * - /vehicles/{vehicleId}: Stores vehicle information. Accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Stores service requests. Accessible by admins.
 * - /routes/{routeId}: Stores route information. Accessible by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information disclosure.
 * - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 * - Ambiguous relationships default to the most secure interpretation (strict owner-only access).
 *
 * Denormalization for Authorization:
 * - The rules use the existence of a document in `/roles_admin/{userId}` to determine admin privileges, avoiding the need to store roles directly within the user document and allowing for efficient role checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user exists as admin
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the owner of existing data.
     * @param {string} userId The user ID to compare against the resource's user ID.
     * @returns {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles. Only the user and admins can access.
     * @path /users/{userId}
     * @allow (create) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can create their own profile if request.auth.uid == userId.
     * @allow (get) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can get their own profile.
     * @allow (update) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can update their own profile.
     * @allow (delete) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can delete their own profile.
     * @deny (create) User 'randomId' cannot create a profile for 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin roles. Document existence grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can create their admin record only if they are already an admin (for initial setup, not general use).
     * @allow (get) Any admin can check for other admins.
     * @allow (update) No updates allowed.
     * @allow (delete) An admin can revoke another admin's privileges.
     * @deny (create) Non-admin user cannot create an admin record.
     * @principle Role-based access control.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client information. Accessible by admins.
     * @path /clients/{clientId}
     * @allow (create) Admins can create client profiles.
     * @allow (get) Admins can retrieve client profiles.
     * @allow (update) Admins can update client profiles.
     * @allow (delete) Admins can delete client profiles.
     * @deny (create) Non-admins cannot create client profiles.
     * @principle Role-based access control.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for driver information. Accessible by admins.
     * @path /drivers/{driverId}
     * @allow (create) Admins can create driver profiles.
     * @allow (get) Admins can retrieve driver profiles.
     * @allow (update) Admins can update driver profiles.
     * @allow (delete) Admins can delete driver profiles.
     * @deny (create) Non-admins cannot create driver profiles.
     * @principle Role-based access control.
     */
    match /drivers/{driverId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for vehicle information. Accessible by admins.
     * @path /vehicles/{vehicleId}
     * @allow (create) Admins can create vehicle records.
     * @allow (get) Admins can retrieve vehicle records.
     * @allow (update) Admins can update vehicle records.
     * @allow (delete) Admins can delete vehicle records.
     * @deny (create) Non-admins cannot create vehicle records.
     * @principle Role-based access control.
     */
    match /vehicles/{vehicleId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for transport service requests. Accessible by admins and the client who created it.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) Admins can create service requests.
     * @allow (get) Admins can retrieve service requests.
     * @allow (update) Admins can update service requests.
     * @allow (delete) Admins can delete service requests.
     * @deny (create) Non-admins cannot create service requests.
     * @principle Role-based access control.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for route information. Accessible by admins.
     * @path /routes/{routeId}
     * @allow (create) Admins can create route records.
     * @allow (get) Admins can retrieve route records.
     * @allow (update) Admins can update route records.
     * @allow (delete) Admins can delete route records.
     * @deny (create) Non-admins cannot create route records.
     * @principle Role-based access control.
     */
    match /routes/{routeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}