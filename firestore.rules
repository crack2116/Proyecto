/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based and ownership-based access control model for a transport service application.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /roles_admin/{userId}: Admin role markers. The existence of a document grants admin privileges.
 * - /clients/{clientId}: Client information, accessible by admins.
 * - /drivers/{driverId}: Driver information, accessible by admins.
 * - /vehicles/{vehicleId}: Vehicle information, accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Service requests, accessible by admins.
 * - /routes/{routeId}: Route information, accessible by admins.
 *
 * Key Security Decisions:
 * - Admin Role:  Admin privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 * - Ownership: User data is stored under `/users/{userId}` and is accessible only to the authenticated user with a matching UID.
 * - No User Listing: Listing users or admin roles is explicitly denied.
 * - Default Deny: All access is denied by default unless explicitly allowed by a rule.
 *
 * Denormalization for Authorization:
 * - Admin Role: To avoid complex queries, admin status is determined by the presence of a document in the `/roles_admin/{userId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, based on the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner and that the resource exists.
     */
    // function isExistingOwner(userId) {
    //   return isOwner(userId) && exists(resource.data.id);
    // }

    /**
     * @description Checks if the user has admin privileges by checking for the existence of a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for clients.
     * @path /clients/{clientId}
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for drivers.
     * @path /drivers/{driverId}
     */
    match /drivers/{driverId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for vehicles.
     * @path /vehicles/{vehicleId}
     */
    match /vehicles/{vehicleId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for service requests.
     * @path /serviceRequests/{serviceRequestId}
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for routes.
     * @path /routes/{routeId}
     */
    match /routes/{routeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}