rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (get, create, update, delete) if the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants admin privileges to users with a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get) if the user's ID matches the document ID.
     * @allow (create) if the user's ID matches the document ID.
     * @deny (get, create, update, delete) if the user is not an admin.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to manage client information.
     * @path /clients/{clientId}
     * @allow (get, list, create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Restricts client management to administrators.
     */
    match /clients/{clientId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage driver information.
     * @path /drivers/{driverId}
     * @allow (get, list, create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Restricts driver management to administrators.
     */
    match /drivers/{driverId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (get, list, create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Restricts vehicle management to administrators.
     */
    match /vehicles/{vehicleId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins and the creating client to manage service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (get) if the user is an admin or the client who created the request.
     * @allow (list) if the user is an admin.
     * @allow (create) if the user is an admin or the client creating the request.
     * @allow (update, delete) if the user is an admin or the client who created the request.
     * @deny (get, create, update, delete) if the user is not an admin or the client.
     * @principle Restricts service request management to administrators and the creating client.
     */
    match /serviceRequests/{serviceRequestId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin() || (request.auth.uid == resource.data.clientId);
      allow list: if isAdmin();
      allow create: if isAdmin() || (request.auth.uid == request.resource.data.clientId);
      allow update: if isAdmin() || (request.auth.uid == resource.data.clientId);
      allow delete: if isAdmin() || (request.auth.uid == resource.data.clientId);
    }

    /**
     * @description Allows admins to manage route information.
     * @path /routes/{routeId}
     * @allow (get, list, create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Restricts route management to administrators.
     */
    match /routes/{routeId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}