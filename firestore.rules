/**
 * @fileoverview Firestore Security Rules for Transport Service App
 *
 * Core Philosophy:
 * This ruleset enforces a role-based and ownership-based access control model.
 * Users can only access their own data, while administrators have broader access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /roles_admin/{userId}: Indicates admin role.
 * - /clients/{clientId}: Stores client information.
 * - /drivers/{driverId}: Stores driver information.
 * - /vehicles/{vehicleId}: Stores vehicle information.
 * - /serviceRequests/{serviceRequestId}: Stores transport service requests.
 * - /routes/{routeId}: Stores route information.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document.
 * - Only admins can create, update, or delete driver, vehicle, and route documents.
 * - Clients can only create service requests, while admins can manage them.
 * - Listing of service requests is not allowed for non-admins, as per the original error.
 *
 * Denormalization for Authorization:
 * - The rules leverage the document ID for user ownership checks (e.g., userId in /users/{userId}).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the admin role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile at /users/user123.
     * @allow (get, update, delete) User with UID 'user123' reads, updates, or deletes their profile at /users/user123.
     * @deny (create) User with UID 'user123' tries to create a profile at /users/user456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Users should not be able to list all user profiles.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) An admin role document can be created only by another admin.
     * @allow (get, update, delete) Only admins can manage admin roles.
     * @deny (create) A regular user cannot create an admin role document.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Admin roles should not be listable.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (create, update, delete) Only admins can manage client information.
     * @allow (get, list) Any authenticated user can view client information.
     * @deny (create) A regular user cannot create a client document.
     * @principle Restricts client management to admins, allows public read access.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (create, update, delete) Only admins can manage driver information.
     * @allow (get, list) Any authenticated user can view driver information.
     * @deny (create) A regular user cannot create a driver document.
     * @principle Restricts driver management to admins, allows public read access.
     */
    match /drivers/{driverId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (create, update, delete) Only admins can manage vehicle information.
     * @allow (get, list) Any authenticated user can view vehicle information.
     * @deny (create) A regular user cannot create a vehicle document.
     * @principle Restricts vehicle management to admins, allows public read access.
     */
    match /vehicles/{vehicleId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for transport service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) Authenticated users can create service requests.
     * @allow (get, update, delete) Only admins can manage service requests.
     * @deny (create) An unauthenticated user cannot create a service request.
     * @principle Restricts service request management to admins, allows user creation.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin(); // The error was caused by non-admins trying to list service requests. This is now denied.
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (create, update, delete) Only admins can manage route information.
     * @allow (get, list) Any authenticated user can view route information.
     * @deny (create) A regular user cannot create a route document.
     * @principle Restricts route management to admins, allows public read access.
     */
    match /routes/{routeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}