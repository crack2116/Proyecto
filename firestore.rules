/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with an emphasis on admin-only access to sensitive collections,
 *   user-owned data trees, and public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user and admins.
 * - /roles_admin/{userId}: Indicates admin role. Existence of document grants admin privileges.
 * - /clients/{clientId}: Client information, accessible by admins.
 * - /drivers/{driverId}: Driver information, accessible by admins.
 * - /vehicles/{vehicleId}: Vehicle information, accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Service requests, accessible by admins.
 * - /routes/{routeId}: Route information, accessible by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Admin privileges are determined by the existence of a document in the /roles_admin/{userId} collection.
 * - Read-only collections are handled with `allow get, list: if true;`.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @param {void}
     * @return {bool}
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against.
     * @return {bool}
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the current user is an existing owner of the resource, ensuring the document exists before proceeding.
      * @param {string} userId - The user ID to compare against.
      * @return {bool}
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in the /roles_admin/{userId} collection.
     * @return {bool}
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can create their own profile.
     * @deny (create) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' cannot create a profile for another user.
     * @allow (get) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can read their own profile.
     * @deny (get) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' cannot read another user's profile.
     * @allow (update) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can update their own profile.
     * @deny (update) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' cannot update another user's profile.
     * @allow (delete) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can delete their own profile.
     * @deny (delete) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for admin role indicators.
     * @path /roles_admin/{userId}
     * @allow (create) Only admins can create admin role indicators.
     * @deny (create) Regular users cannot create admin role indicators.
     * @allow (get) Any signed-in user can check for admin roles.
     * @deny (get) Anonymous users cannot check for admin roles.
     * @allow (update) Only admins can update admin role indicators.
     * @deny (update) Regular users cannot update admin role indicators.
     * @allow (delete) Only admins can delete admin role indicators.
     * @deny (delete) Regular users cannot delete admin role indicators.
     * @principle Restricts access to a user's own data tree.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (create) Only admins can create client profiles.
     * @deny (create) Regular users cannot create client profiles.
     * @allow (get) Any signed-in user can get client profiles.
     * @deny (get) Anonymous users cannot get client profiles.
     * @allow (update) Only admins can update client profiles.
     * @deny (update) Regular users cannot update client profiles.
     * @allow (delete) Only admins can delete client profiles.
     * @deny (delete) Regular users cannot delete client profiles.
     * @principle Admins can manage client information.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (create) Only admins can create driver profiles.
     * @deny (create) Regular users cannot create driver profiles.
     * @allow (get) Any signed-in user can get driver profiles.
     * @deny (get) Anonymous users cannot get driver profiles.
     * @allow (update) Only admins can update driver profiles.
     * @deny (update) Regular users cannot update driver profiles.
     * @allow (delete) Only admins can delete driver profiles.
     * @deny (delete) Regular users cannot delete driver profiles.
     * @principle Admins can manage driver information.
     */
    match /drivers/{driverId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (create) Only admins can create vehicle profiles.
     * @deny (create) Regular users cannot create vehicle profiles.
     * @allow (get) Any signed-in user can get vehicle profiles.
     * @deny (get) Anonymous users cannot get vehicle profiles.
     * @allow (update) Only admins can update vehicle profiles.
     * @deny (update) Regular users cannot update vehicle profiles.
     * @allow (delete) Only admins can delete vehicle profiles.
     * @deny (delete) Regular users cannot delete vehicle profiles.
     * @principle Admins can manage vehicle information.
     */
    match /vehicles/{vehicleId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for transport service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) Only admins can create service requests.
     * @deny (create) Regular users cannot create service requests.
     * @allow (get) Any signed-in user can get service requests.
     * @deny (get) Anonymous users cannot get service requests.
     * @allow (update) Only admins can update service requests.
     * @deny (update) Regular users cannot update service requests.
     * @allow (delete) Only admins can delete service requests.
     * @deny (delete) Regular users cannot delete service requests.
     * @principle Admins can manage service requests.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (create) Only admins can create route information.
     * @deny (create) Regular users cannot create route information.
     * @allow (get) Any signed-in user can get route information.
     * @deny (get) Anonymous users cannot get route information.
     * @allow (update) Only admins can update route information.
     * @deny (update) Regular users cannot update route information.
     * @allow (delete) Only admins can delete route information.
     * @deny (delete) Regular users cannot delete route information.
     * @principle Admins can manage route information.
     */
    match /routes/{routeId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}