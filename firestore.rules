/**
 * @fileoverview Firestore Security Rules for Transport App
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with user-specific
 * ownership where applicable.  Admins have full access.  Users have access to
 * their own profiles and the service requests that they created.  Data
 * validation is relaxed to allow for rapid prototyping and iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user and admins.
 * - /roles_admin/{userId}: Indicates admin role; document existence grants admin privileges.
 * - /clients/{clientId}: Stores client information, accessible by admins.
 * - /drivers/{driverId}: Stores driver information, accessible by admins.
 * - /vehicles/{vehicleId}: Stores vehicle information, accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Stores transport service requests, accessible by admins and the client who created it.
 * - /routes/{routeId}: Stores route information, accessible by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Admin role is determined by the existence of a document in /roles_admin/{userId}.
 * - Data validation is minimal, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * To simplify rules and improve performance, the following denormalization strategy is used:
 * - The `serviceRequests` collection needs `clientId` in order to implement security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document (isSignedIn, isOwner, and resource exists).
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by checking for the existence of a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can create their own profile.
     * @allow (get) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can read their own profile.
     * @allow (update) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can update their own profile.
     * @allow (delete) User 'xDj4pQ5fvyQ0zjs6zhhqioNUufa2' can delete their own profile.
     * @allow (list) Admin can list all users.
     * @deny (create) User 'mismatchedId' cannot create a profile with a different ID.
     * @principle Enforces document ownership for writes and admin access for listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Only Firebase Functions can create admin roles.
     * @allow (get) Any authenticated user can check for admin role.
     * @allow (update) No one can update admin roles via direct client access.
     * @allow (delete) Only Firebase Functions can delete admin roles.
     * @allow (list) No one can list admin roles.
     * @deny (create) User cannot directly assign themselves as admin.
     * @principle Restricts admin role creation/deletion to server-side logic.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false; // Only server-side can create admin roles
      allow update: if false;
      allow delete: if false; // Only server-side can delete admin roles
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (create) Admins can create client profiles.
     * @allow (get) Admins can read client profiles.
     * @allow (update) Admins can update client profiles.
     * @allow (delete) Admins can delete client profiles.
     * @allow (list) Admins can list all clients.
     * @deny (create) Regular users cannot create client profiles.
     * @principle Restricts client management to administrators.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (create) Admins can create driver profiles.
     * @allow (get) Admins can read driver profiles.
     * @allow (update) Admins can update driver profiles.
     * @allow (delete) Admins can delete driver profiles.
     * @allow (list) Admins can list all drivers.
     * @deny (create) Regular users cannot create driver profiles.
     * @principle Restricts driver management to administrators.
     */
    match /drivers/{driverId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (create) Admins can create vehicle profiles.
     * @allow (get) Admins can read vehicle profiles.
     * @allow (update) Admins can update vehicle profiles.
     * @allow (delete) Admins can delete vehicle profiles.
     * @allow (list) Admins can list all vehicles.
     * @deny (create) Regular users cannot create vehicle profiles.
     * @principle Restricts vehicle management to administrators.
     */
    match /vehicles/{vehicleId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for transport service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) Any signed-in user can create a service request, and must set the clientId to their user ID.
     * @allow (get) Admins and the client who created the request can read it.
     * @allow (update) Admins can update service requests.
     * @allow (delete) Admins can delete service requests.
     * @allow (list) Admins can list all service requests.
     * @deny (create) User cannot create service requests for other clients.
     * @principle Allows clients to create their own service requests but restricts modification to admins.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (create) Admins can create route information.
     * @allow (get) Admins can read route information.
     * @allow (update) Admins can update route information.
     * @allow (delete) Admins can delete route information.
     * @allow (list) Admins can list all route information.
     * @deny (create) Regular users cannot create route information.
     * @principle Restricts route management to administrators.
     */
    match /routes/{routeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}