/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with ownership checks for specific collections.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves and admins.
 * - /roles_admin/{userId}: Documents that, if present, grant the user admin privileges.
 * - /clients/{clientId}: Client information, accessible by admins.
 * - /drivers/{driverId}: Driver information, accessible by admins.
 * - /vehicles/{vehicleId}: Vehicle information, accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Service requests, accessible by admins.
 * - /routes/{routeId}: Route information, accessible by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - Admin status is determined by the existence of a document in the /roles_admin collection.
 * - Write access to most collections is restricted to admins.
 *
 * Denormalization for Authorization:
 * - Admin status is checked via `exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner (signed in, owns the document, and document exists).
     * @path N/A
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in the roles_admin collection.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Role-based access control.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile at /users/user123.
     * @deny (create) User with UID 'user123' tries to create a profile for 'user456' at /users/user456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Prevent user enumeration

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for admin roles.  The existence of a document here grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) An admin creates a role for user 'user123' at /roles_admin/user123.
     * @deny (create) A non-admin tries to create a role.
     * @principle Role-based access control.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Prevent listing of admins

      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (create) An admin creates a client profile.
     * @deny (create) A non-admin tries to create a client profile.
     * @principle Admin-only access for writes.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (create) An admin creates a driver profile.
     * @deny (create) A non-admin tries to create a driver profile.
     * @principle Admin-only access for writes.
     */
    match /drivers/{driverId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (create) An admin creates a vehicle profile.
     * @deny (create) A non-admin tries to create a vehicle profile.
     * @principle Admin-only access for writes.
     */
    match /vehicles/{vehicleId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for transport service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) An admin creates a service request.
     * @deny (create) A non-admin tries to create a service request.
     * @principle Admin-only access for writes.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (create) An admin creates a route.
     * @deny (create) A non-admin tries to create a route.
     * @principle Admin-only access for writes.
     */
    match /routes/{routeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}