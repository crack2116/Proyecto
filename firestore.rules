/**
 * @fileoverview Firestore Security Rules for Transport Service App
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with ownership constraints
 * where appropriate. Administrative actions are limited to users with an admin role.
 * Individual users have access to their own data and, in some cases, data they've created.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user themselves and admins.
 * - /roles_admin/{userId}: Presence of a document grants the user admin privileges.
 * - /clients/{clientId}: Client information, accessible by admins.
 * - /drivers/{driverId}: Driver information, accessible by admins.
 * - /vehicles/{vehicleId}: Vehicle information, accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Service requests, accessible by admins.
 * - /routes/{routeId}: Route information, accessible by admins.
 *
 * Key Security Decisions:
 * - Access to listing all documents in a collection is granted only when the collection is intended to be fully public or to specific roles (e.g. admin).
 * - Write access is always protected by authorization checks; `if true;` is never used for write operations.
 *
 * Denormalization for Authorization:
 *  N/A - currently not needed.
 *
 * Structural Segregation:
 *  N/A - currently not needed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the user ID in the path.
     * @param {string} userId The user ID from the document path.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in the /roles_admin/{userId} collection.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * Used before update and delete operations.
     * @param {string} userId The user ID from the document path.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *     - request.auth.uid: 'user123'
     *     - resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads, updates, or deletes their own profile.
     *     - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create a profile for another user.
     *     - request.auth.uid: 'user123'
     *     - resource.data.id: 'user456'
     * @principle Enforces user-ownership: Users can only manage their own profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && (isExistingOwner(userId) || isAdmin()) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && (isExistingOwner(userId) || isAdmin());
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Admin role assigned to user 'admin123'.
     *     - request.auth.uid: (any admin user ID)
     * @allow (get) Admin user 'admin123' fetches their own admin role.
     *     - request.auth.uid: 'admin123'
     * @deny (create) Non-admin user attempts to assign admin role.
     *     - request.auth.uid: 'user123'
     * @deny (delete) Non-admin user attempts to revoke admin role.
     *     - request.auth.uid: 'user123'
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (create, get, list, update, delete) Admins can manage client information.
     *     - request.auth.uid: (any admin user ID)
     * @deny (create, get, list, update, delete) Non-admin users cannot manage client information.
     *     - request.auth.uid: 'user123'
     * @principle Restricts client management to admins.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (create, get, list, update, delete) Admins can manage driver information.
     *     - request.auth.uid: (any admin user ID)
     * @deny (create, get, list, update, delete) Non-admin users cannot manage driver information.
     *     - request.auth.uid: 'user123'
     * @principle Restricts driver management to admins.
     */
    match /drivers/{driverId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (create, get, list, update, delete) Admins can manage vehicle information.
     *     - request.auth.uid: (any admin user ID)
     * @deny (create, get, list, update, delete) Non-admin users cannot manage vehicle information.
     *     - request.auth.uid: 'user123'
     * @principle Restricts vehicle management to admins.
     */
    match /vehicles/{vehicleId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) Admins can create service requests.
     *     - request.auth.uid: (any admin user ID)
     * @allow (get, list) Admins can view service requests.
     *     - request.auth.uid: (any admin user ID)
     * @allow (update, delete) Admins can manage service requests.
     *     - request.auth.uid: (any admin user ID)
     * @deny (create, get, list, update, delete) Non-admin users cannot manage service requests.
     *     - request.auth.uid: 'user123'
     * @principle Restricts service request management to admins.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (create, get, list, update, delete) Admins can manage route information.
     *     - request.auth.uid: (any admin user ID)
     * @deny (create, get, list, update, delete) Non-admin users cannot manage route information.
     *     - request.auth.uid: 'user123'
     * @principle Restricts route management to admins.
     */
    match /routes/{routeId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}