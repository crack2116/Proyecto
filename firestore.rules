rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data. Admins can also read and write user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates a profile with id: 'user123'.
     * @allow (get) User with ID 'user123' reads their own profile. Admin reads user profile.
     * @allow (update) User with ID 'user123' updates their own profile. Admin updates user profile.
     * @allow (delete) User with ID 'user123' deletes their own profile. Admin deletes user profile.
     * @deny (create) User with ID 'user123' attempts to create a profile with id: 'user456'.
     * @deny (get) User with ID 'user123' attempts to read the profile of 'user456' (non-admin).
     * @deny (update) User with ID 'user123' attempts to update the profile of 'user456' (non-admin).
     * @deny (delete) User with ID 'user123' attempts to delete the profile of 'user456' (non-admin).
     * @principle Enforces user-ownership for user profiles and allows admin override.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Allows admins to be created and read by anyone. This collection is only for role assignment and existence grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) User with ID 'admin123' creates an admin role document.
     * @allow (get) Any user reads an admin role document.
     * @deny (update) Non-admin attempts to update an admin role document.
     * @deny (delete) Non-admin attempts to delete an admin role document.
     * @principle Only admins can manage admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isNewAdmin(userId);
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage client information.
     * @path /clients/{clientId}
     * @allow (create) Admin creates a new client.
     * @allow (get) Any user reads client information.
     * @allow (update) Admin updates a client's information.
     * @allow (delete) Admin deletes a client.
     * @deny (create) Non-admin attempts to create a client.
     * @deny (update) Non-admin attempts to update a client.
     * @deny (delete) Non-admin attempts to delete a client.
     * @principle Only admins can manage client data.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage driver information.
     * @path /drivers/{driverId}
     * @allow (create) Admin creates a new driver.
     * @allow (get) Admin reads driver information.
     * @allow (update) Admin updates a driver's information.
     * @allow (delete) Admin deletes a driver.
     * @deny (create) Non-admin attempts to create a driver.
     * @deny (get) Non-admin attempts to read driver information.
     * @deny (update) Non-admin attempts to update a driver.
     * @deny (delete) Non-admin attempts to delete a driver.
     * @principle Only admins can manage driver data.
     */
    match /drivers/{driverId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (create) Admin creates a new vehicle.
     * @allow (get) Admin reads vehicle information.
     * @allow (update) Admin updates a vehicle's information.
     * @allow (delete) Admin deletes a vehicle.
     * @deny (create) Non-admin attempts to create a vehicle.
     * @deny (get) Non-admin attempts to read vehicle information.
     * @deny (update) Non-admin attempts to update a vehicle.
     * @deny (delete) Non-admin attempts to delete a vehicle.
     * @principle Only admins can manage vehicle data.
     */
    match /vehicles/{vehicleId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) Any signed-in user can create a service request.
     * @allow (get) Any signed-in user can read a service request.
     * @allow (update) Admin updates a service request.
     * @allow (delete) Admin deletes a service request.
     * @deny (update) Non-admin attempts to update a service request.
     * @deny (delete) Non-admin attempts to delete a service request.
     * @principle Admins manage service requests.
     */
    match /serviceRequests/{serviceRequestId} {
      // Permitir a usuarios autenticados leer la colecci√≥n completa y documentos individuales
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      // Cualquier usuario autenticado puede crear solicitudes de servicio
      allow create: if isSignedIn();
      // Solo administradores pueden actualizar/eliminar
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage route information.
     * @path /routes/{routeId}
     * @allow (create) Admin creates a new route.
     * @allow (get) Admin reads route information.
     * @allow (update) Admin updates a route's information.
     * @allow (delete) Admin deletes a route.
     * @deny (create) Non-admin attempts to create a route.
     * @deny (get) Non-admin attempts to read route information.
     * @deny (update) Non-admin attempts to update a route.
     * @deny (delete) Non-admin attempts to delete a route.
     * @principle Only admins can manage route data.
     */
    match /routes/{routeId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin based on the existence of a document in the `/roles_admin/{userId}` collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

     /**
      * @description Checks if an admin exists
      * @param {string} userId The user ID to check against.
      * @return {boolean} True if the admin exists, false otherwise.
      */
     function isExistingAdmin(userId) {
          return exists(/databases/$(database)/documents/roles_admin/$(userId));
     }

     function isNewAdmin(userId) {
          return !exists(/databases/$(database)/documents/roles_admin/$(userId));
     }

     /**
      * @description Checks if the driver exists
      * @param {string} driverId The driver ID to check against.
      * @return {boolean} True if the driver exists, false otherwise.
      */
     function isExistingDriver(driverId) {
          return exists(/databases/$(database)/documents/drivers/$(driverId));
     }

      /**
      * @description Checks if the vehicle exists
      * @param {string} vehicleId The vehicle ID to check against.
      * @return {boolean} True if the vehicle exists, false otherwise.
      */
     function isExistingVehicle(vehicleId) {
          return exists(/databases/$(database)/documents/vehicles/$(vehicleId));
     }

     /**
      * @description Checks if the service request exists
      * @param {string} serviceRequestId The service request ID to check against.
      * @return {boolean} True if the service request exists, false otherwise.
      */
     function isExistingServiceRequest(serviceRequestId) {
          return exists(/databases/$(database)/documents/serviceRequests/$(serviceRequestId));
     }

     /**
      * @description Checks if the route exists
      * @param {string} routeId The route ID to check against.
      * @return {boolean} True if the route exists, false otherwise.
      */
     function isExistingRoute(routeId) {
          return exists(/databases/$(database)/documents/routes/$(routeId));
     }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
          return exists(/databases/$(database)/documents/users/$(userId));
    }
  }
}