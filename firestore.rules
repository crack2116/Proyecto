/**
 * @fileoverview Firestore Security Rules for Transport Service App
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where admins have broad access and users (clients, drivers) have limited access to their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user and admins.
 * - /roles_admin/{userId}: Indicates admin role. The existence of a document grants admin privileges.
 * - /clients/{clientId}: Stores client information. Accessible by admins and potentially associated users (not yet implemented).
 * - /drivers/{driverId}: Stores driver information. Accessible by admins.
 * - /vehicles/{vehicleId}: Stores vehicle information. Accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Stores transport service requests. Accessible by admins and the client who created it.
 * - /routes/{routeId}: Stores route information. Accessible by admins.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to prevent information disclosure.
 * - Admin privileges are determined by the existence of a document in the `/roles_admin/{userId}` collection.
 * - Data shape validation is relaxed in this prototype to enable rapid development. However, critical authorization fields are validated.
 *
 * Denormalization for Authorization:
 * - The `ServiceRequest` entity should include `clientId` to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Owner and Admin can get, update, and delete the user profile.
     * @deny (create) User cannot create a profile for another user.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Only accessible by backend functions or another admin (not implemented).
     * @allow (get) Any signed in user can get a role for a user.
     * @allow (update, delete) Only accessible by backend functions or another admin (not implemented).
     * @deny (list) Listing admin roles is not allowed.
     * @principle Restricts admin role creation and modification.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for clients.
     * @path /clients/{clientId}
     * @allow (create) Admins can create clients.
     * @allow (get, update, delete) Admins can get, update, and delete client information.
     * @deny (create) Non-admins cannot create clients.
     * @deny (list) Listing clients is not allowed.
     * @principle Restricts client management to admins.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for drivers.
     * @path /drivers/{driverId}
     * @allow (create) Admins can create drivers.
     * @allow (get, update, delete) Admins can get, update, and delete driver information.
     * @deny (create) Non-admins cannot create drivers.
     * @deny (list) Listing drivers is not allowed.
     * @principle Restricts driver management to admins.
     */
    match /drivers/{driverId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for vehicles.
     * @path /vehicles/{vehicleId}
     * @allow (create) Admins can create vehicles.
     * @allow (get, update, delete) Admins can get, update, and delete vehicle information.
     * @deny (create) Non-admins cannot create vehicles.
     * @deny (list) Listing vehicles is not allowed.
     * @principle Restricts vehicle management to admins.
     */
    match /vehicles/{vehicleId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) Signed-in users can create service requests.
     * @allow (get) Admins can get any service request.
     * @allow (list) Admins can list any service request.
     * @allow (update, delete) Admins can update or delete service requests. Clients cannot update service requests.
     * @deny (create) Non-signed-in users cannot create service requests.
     * @principle Allows admins full control and users to create service requests.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for routes.
     * @path /routes/{routeId}
     * @allow (create) Admins can create routes.
     * @allow (get, update, delete) Admins can get, update, and delete route information.
     * @deny (create) Non-admins cannot create routes.
     * @deny (list) Listing routes is not allowed.
     * @principle Restricts route management to admins.
     */
    match /routes/{routeId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}