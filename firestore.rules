rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is an existing owner of the document.
      */
    function isExistingOwner(userId) {
      return (isOwner(userId) && resource != null);
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile: `request.auth.uid == 'user123'`
     * @allow (get, update, delete) User with ID 'user123' accesses their profile: `request.auth.uid == 'user123'` or an admin accesses it.
     * @deny (create) User with ID 'user456' tries to create a profile for 'user123': `request.auth.uid != 'user123'`
     * @principle Enforces document ownership for reads and writes, and allows admin override.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Rules for admin role assignment.
     * @path /roles_admin/{userId}
     * @allow (create, get, update, delete) Only an admin can manage admin roles.
     * @deny (create) A non-admin user tries to grant themselves admin privileges.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (create, get, update, delete) Only admins can manage client information.
     * @deny (create) A non-admin user tries to create client information.
     * @principle Restricts client data management to admins.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (create, get, update, delete) Only admins can manage driver information.
     * @deny (create) A non-admin user tries to create driver information.
     * @principle Restricts driver data management to admins.
     */
    match /drivers/{driverId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (create, get, update, delete) Only admins can manage vehicle information.
     * @deny (create) A non-admin user tries to create vehicle information.
     * @principle Restricts vehicle data management to admins.
     */
    match /vehicles/{vehicleId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for transport service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) Only admins can create service requests.
     * @allow (get, list) Public read access for all service requests.
     * @allow (update, delete) Only admins can update or delete service requests.
     * @deny (create) A non-admin user tries to create service requests.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (create, get, update, delete) Only admins can manage route information.
     * @deny (create) A non-admin user tries to create route information.
     * @principle Restricts route data management to admins.
     */
    match /routes/{routeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}