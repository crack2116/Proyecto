/**
 * @file Firebase Security Rules for Mewing Transport Manager
 *
 * @description This ruleset enforces a role-based access control model with ownership constraints for user-specific data.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profiles. Accessible only by the user and admins.
 * - /roles_admin/{userId}: Indicates admin role. Existence of document grants admin privileges.
 * - /clients/{clientId}: Stores client information. Accessible by admins.
 * - /drivers/{driverId}: Stores driver information. Accessible by admins.
 * - /vehicles/{vehicleId}: Stores vehicle information. Accessible by admins.
 * - /serviceRequests/{serviceRequestId}: Stores transport service requests. Accessible by admins.
 * - /routes/{routeId}: Stores route information. Accessible by admins.
 *
 * @keySecurityDecisions
 * - User listing is not allowed for non-admins.
 * - Admin privileges are determined by the existence of a document in /roles_admin/{userId}.
 * - Data validation is relaxed to facilitate rapid prototyping, focusing on authorization and relational integrity only.
 *
 * @denormalizationForAuthorization
 * - No denormalization is explicitly used, as the access model is primarily role-based and ownership-based. However, consider adding an `ownerId` or similar field to `ServiceRequest` to link it directly to the creating user if non-admin users need to manage their own requests.
 *
 * @structuralSegregation
 * - User-specific data is stored under /users/{userId}, ensuring that only the user and admins can access it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures that only authenticated users can access certain resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership for access control.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership and existence for updates and deletes.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user is an admin by verifying the existence of a document in /roles_admin/{userId}.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Grants administrative privileges based on document existence.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get) Signed-in user can read their own profile.
     * @allow (create) Signed-in user can create their own profile if the userId matches their auth UID.
     * @allow (update) Signed-in user can update their own profile if the userId matches their auth UID.
     * @allow (delete) Signed-in user can delete their own profile if the userId matches their auth UID.
     * @deny (get) Signed-in user cannot read another user's profile.
     * @deny (create) Signed-in user cannot create a profile with a mismatched userId.
     * @deny (update) Signed-in user cannot update another user's profile.
     * @deny (delete) Signed-in user cannot delete another user's profile.
     * @principle Enforces user-ownership and admin override for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && (isExistingOwner(userId) || isAdmin()) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && (isExistingOwner(userId) || isAdmin());
    }

        /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (get) Only admins can read admin role documents.
     * @allow (create) Only admins can create admin role documents.
     * @allow (update) Only admins can update admin role documents.
     * @allow (delete) Only admins can delete admin role documents.
     * @deny (get) Non-admins cannot read admin role documents.
     * @deny (create) Non-admins cannot create admin role documents.
     * @deny (update) Non-admins cannot update admin role documents.
     * @deny (delete) Non-admins cannot delete admin role documents.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn() && isAdmin();
        allow list: if false; // Admin role listing is not allowed.
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (get) Admins can read client information.
     * @allow (create) Admins can create client information.
     * @allow (update) Admins can update client information.
     * @allow (delete) Admins can delete client information.
     * @deny (get) Non-admins cannot read client information.
     * @deny (create) Non-admins cannot create client information.
     * @deny (update) Non-admins cannot update client information.
     * @deny (delete) Non-admins cannot delete client information.
     * @principle Restricts client management to admins.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for driver information.
     * @path /drivers/{driverId}
     * @allow (get) Admins can read driver information.
     * @allow (create) Admins can create driver information.
     * @allow (update) Admins can update driver information.
     * @allow (delete) Admins can delete driver information.
     * @deny (get) Non-admins cannot read driver information.
     * @deny (create) Non-admins cannot create driver information.
     * @deny (update) Non-admins cannot update driver information.
     * @deny (delete) Non-admins cannot delete driver information.
     * @principle Restricts driver management to admins.
     */
    match /drivers/{driverId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for vehicle information.
     * @path /vehicles/{vehicleId}
     * @allow (get) Admins can read vehicle information.
     * @allow (create) Admins can create vehicle information.
     * @allow (update) Admins can update vehicle information.
     * @allow (delete) Admins can delete vehicle information.
     * @deny (get) Non-admins cannot read vehicle information.
     * @deny (create) Non-admins cannot create vehicle information.
     * @deny (update) Non-admins cannot update vehicle information.
     * @deny (delete) Non-admins cannot delete vehicle information.
     * @principle Restricts vehicle management to admins.
     */
    match /vehicles/{vehicleId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for transport service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (get) Admins can read service requests.
     * @allow (create) Admins can create service requests.
     * @allow (update) Admins can update service requests.
     * @allow (delete) Admins can delete service requests.
     * @deny (get) Non-admins cannot read service requests.
     * @deny (create) Non-admins cannot create service requests.
     * @deny (update) Non-admins cannot update service requests.
     * @deny (delete) Non-admins cannot delete service requests.
     * @principle Restricts service request management to admins.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for route information.
     * @path /routes/{routeId}
     * @allow (get) Admins can read route information.
     * @allow (create) Admins can create route information.
     * @allow (update) Admins can update route information.
     * @allow (delete) Admins can delete route information.
     * @deny (get) Non-admins cannot read route information.
     * @deny (create) Non-admins cannot create route information.
     * @deny (update) Non-admins cannot update route information.
     * @deny (delete) Non-admins cannot delete route information.
     * @principle Restricts route management to admins.
     */
    match /routes/{routeId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}